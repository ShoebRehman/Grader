package shoeb.grader;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.support.design.widget.FloatingActionButton;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;


import java.util.HashMap;
import java.util.List;

import shoeb.grader.R;

/**
 * An activity representing a list of Classes. This activity
 * has different presentations for handset and tablet-size devices. On
 * handsets, the activity presents a list of items, which when touched,
 * lead to a {@link ClassDetailActivity} representing
 * item details. On tablets, the activity presents the list of items and
 * item details side-by-side using two vertical panes.
 *
 * The ClassListActivity, classDetailFragment, and ClassDetailActivity were autogenerated by Android Studio and contains some code that is found in the template project
 */
public class ClassListActivity extends AppCompatActivity {

    /**
     * Whether or not the activity is in two-pane mode, i.e. running on a tablet
     * device.
     */
    private boolean mTwoPane;

    static final int DATA_REQUEST = 1;
    //Declares hashmap which stores class instances
    HashMap<String,classInfo> classMap = new HashMap<String, classInfo>();

    //Declares an instance of the SQLite Open Helper
    //DBHelper helper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_class_list);

        //helper = new DBHelper(this);
        //helper.open();
        //Populates the list of classes if it already exists in the DB
        //populateList();
        //Sets and calls toolbar
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        toolbar.setTitle(getTitle());

        //Sets the context of the database the current context and opens the helper

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getApplicationContext(), addActivityName.class);
                classInfo myClass = new classInfo();
                Bundle bundle = new Bundle();

                //the instance of the class created is passed through intents and the add class activities
                bundle.putSerializable("class", myClass);
                intent.putExtras(bundle);
                //starts the activity, wauts for a result
                startActivityForResult(intent, DATA_REQUEST);
            }
        });

        View recyclerView = findViewById(R.id.class_list);
        assert recyclerView != null;
        setupRecyclerView((RecyclerView) recyclerView);

        if (findViewById(R.id.class_detail_container) != null) {
            // The detail container view will be present only in the
            // large-screen layouts (res/values-w900dp).
            // If this view is present, then the
            // activity should be in two-pane mode.
            mTwoPane = true;
        }
    }

    private void setupRecyclerView(@NonNull RecyclerView recyclerView) {
        recyclerView.setAdapter(new SimpleItemRecyclerViewAdapter(classContent.ITEMS));
    }

    public class SimpleItemRecyclerViewAdapter
            extends RecyclerView.Adapter<SimpleItemRecyclerViewAdapter.ViewHolder> {

        private final List<classInfo> classList;

        public SimpleItemRecyclerViewAdapter(List<classInfo> items) {
            classList = items;
        }

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.class_list_content, parent, false);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(final ViewHolder holder, int position) {
            holder.classItem = classList.get(position);
            holder.mIdView.setText("Class #"+(position+1));
            holder.mIdView.setTextSize(20f);
            holder.mContentView.setText(classList.get(position).getName());
            holder.mContentView.setTextSize(20f);

            holder.mView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //if screen is big enough for two pane...
                    if (mTwoPane) {
                        Bundle arguments = new Bundle();
                        arguments.putString(ClassDetailFragment.ARG_ITEM_ID, holder.classItem.getName());
                        ClassDetailFragment fragment = new ClassDetailFragment();
                        fragment.setArguments(arguments);
                        getSupportFragmentManager().beginTransaction()
                                .replace(R.id.class_detail_container, fragment)
                                .commit();
                    } else {//if only big enough for one pane
                        Context context = v.getContext();
                        Intent intent = new Intent(context, ClassDetailActivity.class);
                        intent.putExtra(ClassDetailFragment.ARG_ITEM_ID, holder.classItem.getName());

                        context.startActivity(intent);
                    }
                }
            });
        }

        @Override
        public int getItemCount() {
            return classList.size();
        }

        public class ViewHolder extends RecyclerView.ViewHolder {
            public final View mView;
            public final TextView mIdView;
            public final TextView mContentView;
            public classInfo classItem;

            public ViewHolder(View view) {
                super(view);
                mView = view;
                mIdView = (TextView) view.findViewById(R.id.id);
                mContentView = (TextView) view.findViewById(R.id.content);
            }

            @Override
            public String toString() {
                return super.toString() + " '" + mContentView.getText() + "'";
            }
        }
    }
    @Override
    protected void onActivityResult(int requestCode,int resultCode, Intent data){
        if(requestCode == DATA_REQUEST){
            if(resultCode == RESULT_OK){

                //based on the context, opens another helper to add the newly created class to the database and populate the class list
                //helper = new DBHelper(this);
                //helper.open();

                //The class is retrieved (serialized) through the result
                try {
                    Intent cl = data;
                    Bundle b = cl.getExtras();
                    final classInfo myClass = (classInfo) b.getSerializable("class");
                    //class is added to the itemmap and item list
                    classContent.ITEM_MAP.put(myClass.getName(), myClass);
                    classContent.ITEMS.add(myClass);

                    //helper adds the newly created class to the database
                    //helper.insertClass(myClass);
                }catch (NullPointerException e){

                }

                finally {
                    //calls a refresh on the application with the newly populated list
                    Intent refresh = new Intent(this, ClassListActivity.class);
                    startActivity(refresh);
                }


            }

        }
    }
    //populates the list when the main activity is called
    /*public void populateList(){
        classContent.ITEM_MAP.clear();;
        classContent.ITEMS.clear();

        String[] classes = helper.getAllClasses(); //the list of strings contains all the class names in the database, to be used to iterate and populate the item list and map
        for(int i = 0; i < classes.length;i++){
            classInfo curr = helper.getClassItem(classes[i]);
            classContent.ITEMS.add(curr);
            classContent.ITEM_MAP.put(classes[i],curr);
        }
    }*/
}
